name: Nightly Build

on:
  schedule:
    - cron: '0 0 * * *' # Runs at 00:00 UTC every day
  workflow_dispatch:

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      todays_date: ${{ steps.get_date.outputs.date }}
      release_tag: ${{ steps.create_release.outputs.release_tag }}
      changes: ${{ steps.check_changes.outputs.changes }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check for changes since the latest tag
        id: check_changes
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            // Retrieve all tags
            const tags = await github.paginate(github.rest.repos.listTags, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            if (tags.length === 0) {
              core.info('No tags found in the repository. Proceeding with build.');
              core.setOutput('changes', true);
              return;
            }

            // Fetch commit dates for each tag and sort by date
            let tagCommits = await Promise.all(tags.map(async (tag) => {
              const commit = await github.rest.git.getCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: tag.commit.sha
              });
              return { tag: tag.name, date: new Date(commit.data.committer.date) };
            }));

            tagCommits.sort((a, b) => b.date - a.date);

            const latestTag = tagCommits[0].tag;
            core.info(`Latest tag based on commit date: ${latestTag}`);

            // Compare the latest tag with the main branch
            const comparison = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: latestTag,
              head: 'main'
            });

            core.info(`Comparing ${latestTag} with main. Total commits: ${comparison.data.total_commits}`);
            core.setOutput('changes', comparison.data.total_commits > 0);

      - name: Get today's date
        if: steps.check_changes.outputs.changes == 'true'
        id: get_date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Create Release
        if: steps.check_changes.outputs.changes == 'true'
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TODAYS_DATE=${{ steps.get_date.outputs.date }}
          RELEASE_COUNT=$(gh release list --repo "$GITHUB_REPOSITORY" | grep "$TODAYS_DATE" | wc -l)
          NEW_VERSION=$((RELEASE_COUNT + 1))
          RELEASE_TAG="nightly-$TODAYS_DATE-v$NEW_VERSION"
          echo "::set-output name=release_tag::$RELEASE_TAG"
          gh release create "$RELEASE_TAG" \
              --repo "$GITHUB_REPOSITORY" \
              --title "Nightly Build $TODAYS_DATE v$NEW_VERSION" \
              --generate-notes \
              --latest

      - name: Update Release with Commit Details
        if: steps.check_changes.outputs.changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0)
          COMMIT_LOGS=$(git log $LATEST_TAG..HEAD --no-merges --pretty=format:"%H|%ae|%s")

          NL=$'\n'
          IFS=$'\n'
          ADDITIONAL_COMMIT_NOTES="${NL}## Additional Commits:${NL}"
          for line in $COMMIT_LOGS; do
            IFS='|' read -ra COMMIT <<< "$line"
            HASH=${COMMIT[0]}
            AUTHOR_EMAIL=${COMMIT[1]}
            MESSAGE=${COMMIT[2]}
            USERNAME=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/search/commits?q=author-email:$AUTHOR_EMAIL" \
              | jq -r '.items[0].author.login')

            USERNAME=${USERNAME:-$AUTHOR_EMAIL}

            ADDITIONAL_COMMIT_NOTES+="* $MESSAGE by @$USERNAME in $HASH${NL}"
          done

          RELEASE_TAG=${{ steps.create_release.outputs.release_tag }}
          RELEASE_URL=$(gh release view "$RELEASE_TAG" --repo "$GITHUB_REPOSITORY" --json url -q .url)
          AUTO_GENERATED_NOTES=$(gh release view "$RELEASE_TAG" --repo "$GITHUB_REPOSITORY" --json body -q .body)
          PART_ONE=$(echo "$AUTO_GENERATED_NOTES" | awk '/\*\*Full Changelog\*\*:/ {exit} {print}')
          PART_TWO=$(echo "$AUTO_GENERATED_NOTES" | awk '/\*\*Full Changelog\*\*:/,0')
          UPDATED_NOTES="$PART_ONE$ADDITIONAL_COMMIT_NOTES${NL}$PART_TWO"
          gh release edit "$RELEASE_TAG" \
              --repo "$GITHUB_REPOSITORY" \
              --notes "$UPDATED_NOTES"

  build_and_upload_apk:
    runs-on: ubuntu-latest
    needs: create_release
    if: needs.create_release.outputs.changes == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Build APK
        run: |
          ./gradlew assembleRelease
          cp app/build/outputs/apk/release/app-release.apk app-release-${{ needs.create_release.outputs.todays_date }}.apk

      - name: Zip APK
        run: |
          mkdir build
          zip -r build/app-release-${{ needs.create_release.outputs.todays_date }}.zip app-release-${{ needs.create_release.outputs.todays_date }}.apk

      - name: Upload APK and ZIP to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_TAG=${{ needs.create_release.outputs.release_tag }}
          apk_file="app-release-${{ needs.create_release.outputs.todays_date }}.apk"
          zip_file="build/app-release-${{ needs.create_release.outputs.todays_date }}.zip"
          gh release upload "$RELEASE_TAG" \
              --repo "$GITHUB_REPOSITORY" \
              "$apk_file" \
              "$zip_file"
