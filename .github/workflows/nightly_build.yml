name: Nightly Build

on:
  schedule:
    - cron: '0 0 * * *' # Runs at 00:00 UTC every day
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Check for changes since the latest tag
        id: check_changes
        uses: actions/github-script@v7
        with:
          script: |
            // Retrieve all tags
            const tags = await github.paginate(github.rest.repos.listTags, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            if (tags.length === 0) {
              core.info('No tags found in the repository. Proceeding with build.');
              core.setOutput('changes', true);
              return;
            }

            // Fetch commit dates for each tag and sort by date
            let tagCommits = await Promise.all(tags.map(async (tag) => {
              const commit = await github.rest.git.getCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: tag.commit.sha
              });
              return { tag: tag.name, date: new Date(commit.data.committer.date) };
            }));

            tagCommits.sort((a, b) => b.date - a.date);

            const latestTag = tagCommits[0].tag;
            core.info(`Latest tag based on commit date: ${latestTag}`);

            // Compare the latest tag with the main branch
            const comparison = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: latestTag,
              head: 'main'
            });

            core.info(`Comparing ${latestTag} with main. Total commits: ${comparison.data.total_commits}`);
            core.setOutput('changes', comparison.data.total_commits > 0);
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 17
        if: steps.check_changes.outputs.changes == 'true'
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Get today's date
        if: steps.check_changes.outputs.changes == 'true'
        run: echo "TODAYS_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Build APK
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          ./gradlew assembleRelease
          cp app/build/outputs/apk/release/app-release.apk app-release-${{ env.TODAYS_DATE }}.apk

      - name: Zip APK
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          mkdir build
          zip -r build/app-release-${{ env.TODAYS_DATE }}.zip app-release-${{ env.TODAYS_DATE }}.apk

      - name: Create Release
        if: steps.check_changes.outputs.changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_COUNT=$(gh release list --repo "$GITHUB_REPOSITORY" | grep "${{ env.TODAYS_DATE }}" | wc -l)
          NEW_VERSION=$((RELEASE_COUNT + 1))
          gh release create "nightly-${{ env.TODAYS_DATE }}-v${NEW_VERSION}" \
              --repo "$GITHUB_REPOSITORY" \
              --title "Nightly Build ${{ env.TODAYS_DATE }} v${NEW_VERSION}" \
              --notes "Automated release for ${{ env.TODAYS_DATE }} version ${NEW_VERSION}" \
              --generate-notes \
              "./app-release-${{ env.TODAYS_DATE }}.apk" \
              "./build/app-release-${{ env.TODAYS_DATE }}.zip"

      - name: Append Commits with GitHub Usernames and Messages to Release Notes and Update Release
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          # Fetch the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0)

          # Generate release notes for non-merge commits including author's email and commit message
          COMMIT_LOGS=$(git log $LATEST_TAG..HEAD --no-merges --pretty=format:"%H|%ae|%s")

          IFS=$'\n'
          COMMIT_NOTES="### Additional Commits:\n"
          for line in $COMMIT_LOGS; do
            IFS='|' read -ra COMMIT <<< "$line"
            HASH=${COMMIT[0]}
            AUTHOR_EMAIL=${COMMIT[1]}
            MESSAGE=${COMMIT[2]}

            # Search for the first commit on GitHub by this email to get the username
            USERNAME=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/search/commits?q=author-email:$AUTHOR_EMAIL" \
              | jq -r '.items[0].author.login')

            # If no username found, use the email
            USERNAME=${USERNAME:-$AUTHOR_EMAIL}

            # Append to commit notes
            COMMIT_NOTES+="- Commit #$HASH by @$USERNAME: $MESSAGE\n"
          done

          # Retrieve the auto-generated release notes
          RELEASE_URL=$(echo $RELEASE_OUTPUT | jq -r '.url')
          AUTO_GENERATED_NOTES=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$RELEASE_URL" | jq -r '.body')

          # Combine auto-generated notes with commit notes
          UPDATED_NOTES="$AUTO_GENERATED_NOTES\n\n$COMMIT_NOTES"

          # Update the release with the combined notes
          gh release edit "nightly-${{ env.TODAYS_DATE }}" \
              --repo "$GITHUB_REPOSITORY" \
              --notes "$UPDATED_NOTES"
